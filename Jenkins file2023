     def sendSlackNotifications(String buildStatus = 'STARTED') {
  
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    Color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}


node{
     properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])
    def mavenhome = tool name: 'maven3.8.6'
    // Get the code from Github Repo
    stage('checkoutcode'){
        git branch: 'development', url: 'https://github.com/ramu455/maven-web-application.git'
    }
    
    //Do the build by using maven build tool
    stage('build'){
        sh "${mavenhome}/bin/mvn clean package"
    }
    /*
    //execute the sonarqube report
    stage('execute sonarqube report'){
        sh "${mavenhome}/bin/mvn sonar:sonar"
    }
    //upload artifacts into artifact repo
    stage('upload artifact'){
        sh "${mavenhome}/bin/mvn deploy"
    }
    // deploy application into tomcat server
    stage('deployapplicationintotomcatserver'){
      sshagent(['deploy_user']) {
    sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war  ec2-user@3.108.41.103:/opt/apache-tomcat-9.0.65/webapps"
}
}
*/
   }//Try closing 
   catch (e){
   currentBuild.result = "FAILED"
   throw e
   }
   finally{
   sendSlackNotifications(currentBuild.result)
   }
   }//Node Closing
   
